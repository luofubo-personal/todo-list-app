{
  "version": 3,
  "sources": ["src/environments/environment.ts", "src/app/todo.service.ts"],
  "sourcesContent": ["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:5001'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be made after initialization of the environment.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.", "import { Injectable, inject } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Todo } from './todo';\nimport { environment } from '../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TodoService {\n  private todosUrl = environment.apiUrl + '/api/todos';  // URL to web api\n  private httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  private http = inject(HttpClient);\n\n  /** GET todos from the server */\n  getTodos(): Observable<Todo[]> {\n    return this.http.get<Todo[]>(this.todosUrl)\n      .pipe(\n        catchError(this.handleError<Todo[]>('getTodos', []))\n      );\n  }\n\n  /** GET todo by id. Will 404 if id not found */\n  getTodo(id: number): Observable<Todo> {\n    const url = `${this.todosUrl}/${id}`;\n    return this.http.get<Todo>(url).pipe(\n      catchError(this.handleError<Todo>(`getTodo id=${id}`))\n    );\n  }\n\n  /** POST: add a new todo to the server */\n  addTodo(todo: Todo): Observable<Todo> {\n    return this.http.post<Todo>(this.todosUrl, todo, this.httpOptions).pipe(\n      catchError(this.handleError<Todo>('addTodo'))\n    );\n  }\n\n  /** PUT: update the todo on the server */\n  updateTodo(todo: Todo): Observable<Todo> {\n    const url = `${this.todosUrl}/${todo.id}`;\n    return this.http.put<Todo>(url, todo, this.httpOptions).pipe(\n      catchError(this.handleError<Todo>('updateTodo'))\n    );\n  }\n\n  /** DELETE: delete the todo from the server */\n  deleteTodo(id: number): Observable<Todo> {\n    const url = `${this.todosUrl}/${id}`;\n    return this.http.delete<Todo>(url, this.httpOptions).pipe(\n      catchError(this.handleError<Todo>('deleteTodo'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: HttpErrorResponse | Error): Observable<T> => {\n      // Log error details for debugging\n      console.error(`${operation} failed:`, error);\n\n      // Extract user-friendly error message\n      let errorMessage = 'An unexpected error occurred';\n\n      if (error instanceof HttpErrorResponse) {\n        if (error.error) {\n          if (typeof error.error === 'string') {\n            errorMessage = error.error;\n          } else if (error.error.message) {\n            errorMessage = error.error.message;\n          } else if (error.error.title) {\n            errorMessage = error.error.title;\n          }\n        } else if (error.message) {\n          errorMessage = error.message;\n        } else if (error.statusText) {\n          errorMessage = error.statusText;\n        }\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n\n      // In a real application, you would:\n      // 1. Send error to logging service\n      // 2. Show user-friendly notification\n      // 3. Possibly retry the operation\n\n      console.warn(`User message: ${errorMessage}`);\n\n      // Let the app keep running by returning an empty result\n      return of(result as T);\n    };\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA,IAIa;AAJb;;;AAIO,IAAM,cAAc;MACzB,YAAY;MACZ,QAAQ;;;;;;ICKG;;;;;AAXb;AACA;AACA;AACA;AAGA;AAKO,IAAM,cAAN,MAAMA,aAAW;MAAjB,cAAA;AACG,aAAA,WAAW,YAAY,SAAS;AAChC,aAAA,cAAc;UACpB,SAAS,IAAI,YAAY,EAAE,gBAAgB,mBAAkB,CAAE;;AAGzD,aAAA,OAAO,OAAO,UAAU;MAoFlC;;MAjFE,WAAQ;AACN,eAAO,KAAK,KAAK,IAAY,KAAK,QAAQ,EACvC,KACC,WAAW,KAAK,YAAoB,YAAY,CAAA,CAAE,CAAC,CAAC;MAE1D;;MAGA,QAAQ,IAAU;AAChB,cAAM,MAAM,GAAG,KAAK,QAAQ,IAAI,EAAE;AAClC,eAAO,KAAK,KAAK,IAAU,GAAG,EAAE,KAC9B,WAAW,KAAK,YAAkB,cAAc,EAAE,EAAE,CAAC,CAAC;MAE1D;;MAGA,QAAQ,MAAU;AAChB,eAAO,KAAK,KAAK,KAAW,KAAK,UAAU,MAAM,KAAK,WAAW,EAAE,KACjE,WAAW,KAAK,YAAkB,SAAS,CAAC,CAAC;MAEjD;;MAGA,WAAW,MAAU;AACnB,cAAM,MAAM,GAAG,KAAK,QAAQ,IAAI,KAAK,EAAE;AACvC,eAAO,KAAK,KAAK,IAAU,KAAK,MAAM,KAAK,WAAW,EAAE,KACtD,WAAW,KAAK,YAAkB,YAAY,CAAC,CAAC;MAEpD;;MAGA,WAAW,IAAU;AACnB,cAAM,MAAM,GAAG,KAAK,QAAQ,IAAI,EAAE;AAClC,eAAO,KAAK,KAAK,OAAa,KAAK,KAAK,WAAW,EAAE,KACnD,WAAW,KAAK,YAAkB,YAAY,CAAC,CAAC;MAEpD;;;;;;;MAQQ,YAAe,YAAY,aAAa,QAAU;AACxD,eAAO,CAAC,UAAmD;AAEzD,kBAAQ,MAAM,GAAG,SAAS,YAAY,KAAK;AAG3C,cAAI,eAAe;AAEnB,cAAI,iBAAiB,mBAAmB;AACtC,gBAAI,MAAM,OAAO;AACf,kBAAI,OAAO,MAAM,UAAU,UAAU;AACnC,+BAAe,MAAM;cACvB,WAAW,MAAM,MAAM,SAAS;AAC9B,+BAAe,MAAM,MAAM;cAC7B,WAAW,MAAM,MAAM,OAAO;AAC5B,+BAAe,MAAM,MAAM;cAC7B;YACF,WAAW,MAAM,SAAS;AACxB,6BAAe,MAAM;YACvB,WAAW,MAAM,YAAY;AAC3B,6BAAe,MAAM;YACvB;UACF,WAAW,iBAAiB,OAAO;AACjC,2BAAe,MAAM;UACvB;AAOA,kBAAQ,KAAK,iBAAiB,YAAY,EAAE;AAG5C,iBAAO,GAAG,MAAW;QACvB;MACF;;AAzFW,kBAAW,WAAA;MAHvB,WAAW;QACV,YAAY;OACb;OACY,WAAW;;;",
  "names": ["TodoService"]
}
