name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  statuses: write
  security-events: write

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '22.x'

jobs:
  # Code quality checks
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better analysis
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/angular-app/package-lock.json'
        
    - name: Install .NET tools
      run: |
        dotnet tool install --global dotnet-format
        dotnet tool install --global dotnet-reportgenerator-globaltool
        
    - name: Check .NET code formatting
      run: |
        dotnet format backend/TodoApi/TodoApi.csproj --verify-no-changes --verbosity diagnostic
        dotnet format backend/TodoApi.Tests/TodoApi.Tests.csproj --verify-no-changes --verbosity diagnostic
        
    - name: Install frontend dependencies
      working-directory: ./frontend/angular-app
      run: npm ci --legacy-peer-deps
      
    - name: Run Angular linting
      working-directory: ./frontend/angular-app
      run: npm run lint || echo "Linting issues found but continuing..."
      
    - name: Check TypeScript formatting
      working-directory: ./frontend/angular-app
      run: |
        npx prettier --check "src/**/*.{ts,html,css,scss,json}"
        
    - name: Run SonarCloud Scan
      if: ${{ secrets.SONAR_TOKEN != '' }}
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Comprehensive testing
  comprehensive-tests:
    name: Comprehensive Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet-version: ['9.0.x']
        node-version: ['20.x', '22.x']
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
        
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './frontend/angular-app/package-lock.json'
        
    - name: Restore .NET dependencies
      run: |
        dotnet restore backend/TodoApi/TodoApi.csproj
        dotnet restore backend/TodoApi.Tests/TodoApi.Tests.csproj
        
    - name: Build .NET projects
      run: |
        dotnet build backend/TodoApi/TodoApi.csproj --no-restore --configuration Release
        dotnet build backend/TodoApi.Tests/TodoApi.Tests.csproj --no-restore --configuration Release
        
    - name: Run .NET unit tests
      run: |
        dotnet test backend/TodoApi.Tests/TodoApi.Tests.csproj \
          --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --logger trx \
          --results-directory ./TestResults

    - name: List .NET test results (debug)
      if: always()
      run: |
        echo "Contents of TestResults directory:"
        ls -la ./TestResults/ || echo "TestResults directory not found"
        find . -name "*.trx" -type f || echo "No .trx files found"
          
    - name: Install Angular dependencies
      working-directory: ./frontend/angular-app
      run: npm ci --legacy-peer-deps
      
    - name: Run Angular tests
      working-directory: ./frontend/angular-app
      run: |
        npm run test -- \
          --watch=false \
          --browsers=ChromeHeadless \
          --code-coverage \
          --reporters=progress,junit
          
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-dotnet${{ matrix.dotnet-version }}-node${{ matrix.node-version }}
        path: |
          ./TestResults
          ./frontend/angular-app/coverage

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: YourStrong@Passw0rd
          ACCEPT_EULA: Y
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './frontend/angular-app/package-lock.json'
        
    - name: Start backend API
      run: |
        cd backend/TodoApi
        dotnet run --urls="http://localhost:5001" &
        sleep 10
      env:
        ASPNETCORE_ENVIRONMENT: Development
        ConnectionStrings__TodoContext: "Server=localhost,1433;Database=TodoTestDb;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;"
        
    - name: Install frontend dependencies
      working-directory: ./frontend/angular-app
      run: npm ci --legacy-peer-deps
      
    - name: Build frontend
      working-directory: ./frontend/angular-app
      run: npm run build
      
    - name: Start frontend
      working-directory: ./frontend/angular-app
      run: |
        npx http-server dist/todo-list-angular/browser -p 4200 &
        sleep 5
        
    - name: Run E2E tests
      working-directory: ./frontend/angular-app
      run: |
        # Install Playwright
        npx playwright install
        # Run E2E tests (you'll need to create these)
        # npx playwright test
        
    - name: Health check tests
      run: |
        # Test backend health
        curl -f http://localhost:5001/api/todos || exit 1
        # Test frontend
        curl -f http://localhost:4200 || exit 1

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'performance')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install NBomber
      run: dotnet tool install --global NBomber.CLI
      
    - name: Run performance tests
      run: |
        # Add your performance test commands here
        echo "Running performance tests..."
        # nbomber run --config performance-test-config.json
        
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: ./performance-results

  # Security validation
  security-validation:
    name: Security Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Snyk security scan
      if: ${{ secrets.SNYK_TOKEN != '' }}
      uses: snyk/actions/dotnet@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Run npm audit
      working-directory: ./frontend/angular-app
      run: |
        npm audit --audit-level=high
        
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'todo-list-app'
        path: '.'
        format: 'ALL'
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: reports

  # PR summary
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [code-quality, comprehensive-tests, integration-tests, security-validation]
    if: always()
    
    steps:
    - name: Generate PR summary
      uses: actions/github-script@v7
      with:
        script: |
          const results = {
            'Code Quality': '${{ needs.code-quality.result }}',
            'Comprehensive Tests': '${{ needs.comprehensive-tests.result }}',
            'Integration Tests': '${{ needs.integration-tests.result }}',
            'Security Validation': '${{ needs.security-validation.result }}'
          };
          
          let summary = '## 🔍 PR Validation Summary\n\n';
          
          for (const [check, result] of Object.entries(results)) {
            const emoji = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⏭️';
            summary += `${emoji} **${check}**: ${result}\n`;
          }
          
          summary += '\n---\n';
          summary += 'This PR has been automatically validated. ';
          
          const allPassed = Object.values(results).every(r => r === 'success' || r === 'skipped');
          if (allPassed) {
            summary += '🎉 All checks passed! Ready for review.';
          } else {
            summary += '⚠️ Some checks failed. Please review and fix issues.';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
