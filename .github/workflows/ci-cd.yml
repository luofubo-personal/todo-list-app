name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '22.x'
  AZURE_WEBAPP_NAME: 'todo-api-app'
  AZURE_WEBAPP_PACKAGE_PATH: './backend/TodoApi'
  ANGULAR_APP_PATH: './frontend/angular-app'

jobs:
  # Backend .NET API CI/CD
  backend-ci:
    name: Backend CI - Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: |
        dotnet restore backend/TodoApi/TodoApi.csproj
        dotnet restore backend/TodoApi.Tests/TodoApi.Tests.csproj
        
    - name: Build backend
      run: dotnet build backend/TodoApi/TodoApi.csproj --no-restore --configuration Release
      
    - name: Run backend tests
      run: |
        dotnet test backend/TodoApi.Tests/TodoApi.Tests.csproj \
          --no-build \
          --configuration Release \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --logger trx \
          --results-directory ./TestResults

    - name: List test results (debug)
      if: always()
      run: |
        echo "Contents of TestResults directory:"
        ls -la ./TestResults/ || echo "TestResults directory not found"
        find . -name "*.trx" -type f || echo "No .trx files found"
        find . -name "*.xml" -type f || echo "No .xml files found"

    - name: Upload backend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          ./TestResults
        retention-days: 30

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Backend Tests
        path: './TestResults/*.trx'
        reporter: dotnet-trx
        fail-on-error: false
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        directory: ./TestResults
        flags: backend
        name: backend-coverage
        
    - name: Publish backend artifacts
      run: |
        dotnet publish backend/TodoApi/TodoApi.csproj \
          --configuration Release \
          --output ./publish/backend \
          --no-restore
          
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-artifacts
        path: ./publish/backend
        retention-days: 30

  # Frontend Angular CI/CD
  frontend-ci:
    name: Frontend CI - Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.ANGULAR_APP_PATH }}/package-lock.json
        
    - name: Install dependencies
      working-directory: ${{ env.ANGULAR_APP_PATH }}
      run: npm ci
      
    - name: Lint frontend
      working-directory: ${{ env.ANGULAR_APP_PATH }}
      run: npm run lint
      
    - name: Run frontend tests
      working-directory: ${{ env.ANGULAR_APP_PATH }}
      run: |
        npm run test -- \
          --watch=false \
          --browsers=ChromeHeadless \
          --code-coverage \
          --reporters=progress,junit

    - name: List frontend test results (debug)
      if: always()
      working-directory: ${{ env.ANGULAR_APP_PATH }}
      run: |
        echo "Contents of test-results directory:"
        ls -la ./test-results/ || echo "test-results directory not found"
        echo "Contents of coverage directory:"
        ls -la ./coverage/ || echo "coverage directory not found"
        find . -name "*.xml" -type f || echo "No .xml files found"

    - name: Upload frontend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: |
          ${{ env.ANGULAR_APP_PATH }}/test-results
          ${{ env.ANGULAR_APP_PATH }}/coverage
        retention-days: 30

    - name: Generate frontend test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Frontend Tests
        path: '${{ env.ANGULAR_APP_PATH }}/test-results/*.xml'
        reporter: java-junit
        fail-on-error: false

    - name: Upload frontend coverage
      uses: codecov/codecov-action@v4
      with:
        directory: ${{ env.ANGULAR_APP_PATH }}/coverage
        flags: frontend
        name: frontend-coverage
        
    - name: Build frontend for production
      working-directory: ${{ env.ANGULAR_APP_PATH }}
      run: npm run build -- --configuration production
      
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-artifacts
        path: ${{ env.ANGULAR_APP_PATH }}/dist
        retention-days: 30

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-artifacts
        path: ./backend-artifacts
        
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-artifacts
        path: ./frontend-artifacts
        
    - name: Deploy backend to Azure App Service (Staging)
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}-staging
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
        package: ./backend-artifacts
        
    - name: Deploy frontend to Azure Static Web Apps (Staging)
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_STAGING }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "./frontend-artifacts"
        skip_app_build: true

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-artifacts
        path: ./backend-artifacts
        
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-artifacts
        path: ./frontend-artifacts
        
    - name: Deploy backend to Azure App Service (Production)
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ./backend-artifacts
        
    - name: Deploy frontend to Azure Static Web Apps (Production)
      uses: Azure/static-web-apps-deploy@v1
      with:
        azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        action: "upload"
        app_location: "./frontend-artifacts"
        skip_app_build: true
        
    - name: Run smoke tests
      run: |
        # Wait for deployment to be ready
        sleep 30
        # Add your smoke test commands here
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health || exit 1

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy-production.result == 'success' || needs.deploy-staging.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        # Add Slack/Teams notification here
        
    - name: Notify on failure
      if: needs.deploy-production.result == 'failure' || needs.deploy-staging.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        # Add Slack/Teams notification here
